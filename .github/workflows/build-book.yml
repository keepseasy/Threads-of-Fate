on:
  workflow_dispatch:
    inputs:
      body:
        description: 'Changes description'
        required: true

      sign:
        type: choice
        description: Significance of changes
        options:
        - major
        - minor
        - patch

      draft:
        description: 'dry run'
        required: true
        type: boolean
        default: false

jobs:
  build-book:
    runs-on: ubuntu-latest
    env:
      VERSION: ""

    steps:
    - name: Disable initramfs update
      run: sudo sed -i 's/yes/no/g' /etc/initramfs-tools/update-initramfs.conf
    - name: Disable man-db update
      run: sudo rm -f /var/lib/man-db/auto-update

    - uses: actions/checkout@v3

#get latex and svg tools
    - run: |
        sudo apt -y update
        sudo apt -y install texlive texlive-latex-base texlive-latex-extra
        sudo apt -y install texlive-fonts-extra texlive-fonts-recommended
        sudo apt -y install texlive-lang-cyrillic

    - uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: librsvg2-bin
#        packages: librsvg2-bin texlive texlive-latex-extra texlive-fonts-extra texlive-lang-cyrillic
#        packages: librsvg2-bin texlive-latex-base texlive-latex-extra texlive-fonts-extra texlive-fonts-recommended texlive-lang-cyrillic
        version: 1.0
#    - run: ls /var/lib/texmf
#    - run: |
#        fmtutil-sys --all
#    - run: |
#        texhash

#get python and needed libs
    - uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        cache: 'pip'
    - run: pip install -r scripts/requirements.txt

##restore system from cache
#    - name: Restore cached Primes
#      id: cache-primes-restore
#      uses: actions/cache/restore@v3
#      with:
#        path: /
#        key: last-cache



#make book - double run to get proper table of contents
    - run: |
        pdflatex --enable-pipes --shell-escape ./Threads-of-Fate.tex
        pdflatex --enable-pipes --shell-escape ./Threads-of-Fate.tex


#make character sheet
    - run: rsvg-convert -f pdf -d 300 -p 300 -o character-sheet.pdf character-sheet.svg

#genereate new version tag
    - name: "Get next version"
      run: |
        curl --silent -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/keepseasy/Threads-of-Fate/releases/latest |
        grep '"tag_name":' |
        sed -E 's/.*"([^"]+)".*/\1/' >> tmp.txt
        newtag=""
        if [[ "${{ inputs.sign == 'major' }}" = "true" ]]; then
         newtag="VERSION=$((`cut -d. -f1 tmp.txt`+1)).0.0"
        elif [[ "${{ inputs.sign == 'minor' }}" = "true" ]]; then
         newtag="VERSION=`cut -d. -f1 tmp.txt`.$((`cut -d. -f2 tmp.txt`+1)).0"
        elif [[ "${{ inputs.sign == 'patch' }}" = "true" ]]; then
         newtag="VERSION=`cut -d. -f1 tmp.txt`.`cut -d. -f2 tmp.txt`.$((`cut -d. -f3 tmp.txt`+1))"
        else
         exit 1
        fi
        echo $newtag >> $GITHUB_ENV

#make release
    - name: Release book
      if: inputs.draft==false
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ env.VERSION }}
        release_name: Release ${{ env.VERSION }}
        body: ${{inputs.body}}
        draft: ${{inputs.draft}}
        prerelease: false

    - name: Upload Book
      if: inputs.draft==false
      id: upload-book
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./Threads-of-Fate.pdf
        asset_name: Threads-of-Fate-v${{ env.VERSION }}.pdf
        asset_content_type: application/pdf

    - name: Upload Character sheet
      if: inputs.draft==false
      id: upload-sheet
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./character-sheet.pdf
        asset_name: Character-sheet-v${{ env.VERSION }}.pdf
        asset_content_type: application/pdf
